slcsp-finder
============

This application determines the Second Lowest Cost Silver Plan for a specified set of zip codes.  Full information
on the requirements can be found here: https://github.com/adhocteam/homework/tree/master/slcsp


Building and Running
====================

Assumptions 
-----------
The following software is assumed to be installed and available for the building and running of this application
- Java 8
- Maven
 

Building the application with Maven
-----------------------------------
Run the maven package or install phase from the root of the application:

   > mvn clean package

This will create the following jar file: ./target/slcsp_finder.jar


Running the application
-----------------------
To run the application, execute the slcsp_finder jar with a single parameter to specify the location of the input files

   > java  -jar  target/slcsp_finder.jar  <input-file-location-parameter>

For example, if the input files are in '/data" beneath the directory you're running the application in,
run the application as follows: 

   > java -jar target/slcsp_finder.jar ./data 


Results Location
----------------
The results will overwrite the original values in slcsp.csv


Notes on the Implementation
===========================

Assumptions regarding the requirements
--------------------------------------
This implementation takes the requirements at face value and optimizes for getting results for the
51 zip codes specified.

If the real use case were to be able to support an API that returns the slcsp for any given zip code,
a different approach would likely work better.


Likely Improvements in real life
--------------------------------
Depending on the actual usage for this (a one-off script?  a production-grade application?), the
following improvements might be appropriate:

- Use a properties file for such things as the input file location
- Add junit/jmockit tests that run automatically during the build
- Optimize for speed and memory usage, as appropriate
- Use a real logging system (e.g., log4j)

These (and other) improvements were not made to the current implementation, with an eye towards
not over-engineering a lightly-defined requirement.
